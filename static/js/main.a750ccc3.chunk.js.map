{"version":3,"sources":["components/card/card.component.jsx","components/Card-list/cardlist.component.jsx","components/search-box-component/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","searchMonsters","style","type","onChange","WebKitAppearance","border","outline","padding","width","lineHeight","marginBottom","App","e","setState","searchField","target","value","state","fetch","then","res","json","data","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6SAYeA,G,MAVF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,4BAAKL,EAAMG,QAAQG,MACnB,2BAAIN,EAAMG,QAAQI,UCHjBC,EAAW,SAACR,GACrB,OACI,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC7B,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SCN7BS,EAAY,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,eACpC,OACI,6BACI,2BACIC,MAAOA,EAAOC,KAAK,SACnBH,YAAaA,EACbI,SAAUH,MAMpBC,EAAQ,CACVG,iBAAkB,OAClBC,OAAQ,OACRC,QAAS,OACTC,QAAS,OACTC,MAAO,QACPC,WAAY,OACZC,aAAc,QC+BHC,G,wDA9Cb,aAAc,IAAD,8BACX,gBA2BFX,eAAiB,SAAAY,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA1BzD,EAAKC,MAAQ,CACXtB,SAAU,CACR,CACEH,KAAM,eACNF,GAAG,GAEL,CACEE,KAAM,UACNF,GAAG,GAEL,CACEE,KAAM,SACNF,GAAG,IAGPwB,YAAa,IAjBJ,E,gEAqBO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAU,CAAElB,SAAU2B,OACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAKrB,IAAD,EAC0BG,KAAKV,MAA9BtB,EADD,EACCA,SAAUmB,EADX,EACWA,YACXc,EAAmBjC,EAASkC,QAAO,SAAAxC,GAAO,OAAIA,EAAQG,KAAKsC,cAAcC,SAASjB,EAAYgB,kBACpG,OACE,yBAAK3C,UAAU,OACb,gDACA,kBAAC,EAAD,CACEa,eAAgB2B,KAAK3B,eACrBD,YAAY,oBAEd,kBAAC,EAAD,CAAUJ,SAAUiC,S,GAzCVI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"static/js/main.a750ccc3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport './card-list.style.css'\nimport Card from '../card/card.component'\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map(monster => (\n          <Card key={monster.id} monster={monster}/>\n        ))} \n        </div>\n    )\n}","import React from 'react'\n\nexport const SearchBox = ({placeholder, searchMonsters}) => {\n    return (\n        <div>\n            <input \n                style={style} type=\"search\"\n                placeholder={placeholder} \n                onChange={searchMonsters} \n            />\n        </div>\n    )\n}\n\nconst style = {\n    WebKitAppearance: 'none',\n    border: 'none',\n    outline: 'none',\n    padding: '10px',\n    width: '150px',\n    lineHeight: '30px',\n    marginBottom: '30px'\n}","import React, { Component } from 'react';\nimport {CardList} from './components/Card-list/cardlist.component'\nimport {SearchBox} from './components/search-box-component/searchbox.component'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      monsters: [\n        {\n          name: 'Frankenstein',\n          id:1\n        },\n        {\n          name: 'Dracula',\n          id:2\n        },\n        {\n          name: 'Zombie',\n          id:3\n        }\n      ],\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => this.setState( { monsters: data } ))\n    .catch(error => console.log(error))\n  }\n\n  searchMonsters = e => this.setState({searchField: e.target.value})\n\n  render(){\n    const {monsters, searchField} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          searchMonsters={this.searchMonsters} \n          placeholder=\"Search Monsters\"\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}